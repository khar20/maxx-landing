---
import SunIcon from './icons/Sun.astro';
import MoonIcon from './icons/Moon.astro';
import SystemIcon from './icons/System.astro';

const THEMES = ['Light', 'Dark', 'System'];
---

<div class="relative mx-1">
	<button
		transition:persist
		id="theme-toggle-btn"
		class="flex appearance-none border-none transition hover:scale-125"
	>
		<span class="sr-only">Elige el tema</span>
		<SunIcon
			id="light"
			class="theme-toggle-icon size-6 transition-all"
		/>
		<MoonIcon
			id="dark"
			class="theme-toggle-icon absolute size-6 transition-all"
		/>
		<SystemIcon
			id="system"
			class="theme-toggle-icon absolute size-6 transition-all"
		/>
	</button>
	<div
		transition:persist
		id="themes-menu"
		class="absolute top-8 right-0 hidden min-w-[8rem] rounded-md border border-gray-100 bg-white/90 p-1 text-sm shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md dark:border-gray-500/20 dark:bg-gray-900/90"
	>
		<ul>
			{
				THEMES.map((theme) => (
					<li class="themes-menu-option cursor-default rounded-sm px-2 py-1.5 hover:bg-neutral-400/40 dark:hover:bg-gray-500/50">
						{theme}
					</li>
				))
			}
		</ul>
	</div>
</div>

<style>
	#themes-menu.open {
		display: inline;
		animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94)
			both;
	}

	@keyframes scale-up-center {
		from {
			transform: scale(0.8);
			opacity: 0;
		}

		to {
			transform: scale(1);
			opacity: 1;
		}
	}
</style>

<script is:inline>
    function initThemeSelector() {
        const themesMenu = document.getElementById('themes-menu');
        const toggleBtn = document.getElementById('theme-toggle-btn');
        const themeIcons = document.querySelectorAll('.theme-toggle-icon');
        const themeOptions = document.querySelectorAll('.themes-menu-option');
        const matchMedia = window.matchMedia('(prefers-color-scheme: dark)');

        let removeListener = null;

        const getThemePreference = () => {
            return localStorage.getItem('theme') ?? 'system';
        };

        const updateIcon = (theme) => {
            themeIcons.forEach((icon) => {
                icon.style.scale = icon.id === theme ? '1' : '0';
            });
        };

        const applyTheme = () => {
            const theme = getThemePreference();
            const isDark =
                theme === 'dark' || (theme === 'system' && matchMedia.matches);
            document.documentElement.classList.toggle('dark', isDark);
            updateIcon(theme);
        };

        const updateTheme = () => {
            if (removeListener) removeListener();
            matchMedia.addEventListener('change', applyTheme);
            removeListener = () =>
                matchMedia.removeEventListener('change', applyTheme);
            applyTheme();
        };

        updateTheme();

        // Remover listeners antiguos clonando y reemplazando el elemento
        if (toggleBtn) {
            const newToggleBtn = toggleBtn.cloneNode(true);
            toggleBtn.parentNode.replaceChild(newToggleBtn, toggleBtn);
            
            newToggleBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                themesMenu.classList.toggle('open');
            });
        }

        // Reinicializar opciones de tema
        themeOptions.forEach((option) => {
            const newOption = option.cloneNode(true);
            option.parentNode.replaceChild(newOption, option);
            
            newOption.addEventListener('click', () => {
                localStorage.setItem(
                    'theme',
                    newOption.textContent.trim().toLowerCase()
                );
                updateTheme();
                themesMenu.classList.remove('open');
            });
        });

        // Cerrar el menú al hacer clic fuera
        document.addEventListener('click', () => {
            themesMenu?.classList.remove('open');
        });
    }

    // Inicializar al cargar
    initThemeSelector();

    // Reinicializar después de cada transición
    document.addEventListener('astro:after-swap', () => {
        initThemeSelector();
        window.scrollTo({ left: 0, top: 0, behavior: 'instant' });
    });
</script>
